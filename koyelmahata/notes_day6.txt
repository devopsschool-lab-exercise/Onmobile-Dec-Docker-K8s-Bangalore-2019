===========================================================

RBAC

HELM

OPERATORS

Kubeadm admin

==============================================

AUTHENTICATION &&& AUTHORIZATION

===============================

AUTHENTICATION 

            How to get inside a system.

            ABAC

            CERT ========================USING 

            TOKEN

            LDAP



AUTHORIZATION 

            What you are allowed to do?

            RBAC



What is RBAC?

================================

ROLE BASED ACCESS CONTROL.



API                   NS

=======================================

serviceaccounts       true

clusterrolebindings   false

clusterroles          false

rolebindings          true

roles                 true

===============================================================

API ----> CRUD 

            USING VERB

                  - create

                  - get

                  - delete

                  - list

                  - update

                  - edit

                  - watch

                  - exec

===================================

- create

- get

- delete

- list

- update

- edit

- watch

- exec

  ------------------

          ON ONE OR MULTIPLE API  

                                  ------ USER

==============================================

TYPES OF USER

      user -  OFTEN FOR HUMEN BEING - CAN NOT BE CREATED USING an API

      serviceacccount -OFTEN FOR SYSTEM PODS and ADMIN work - Can be created by API.



KIND OF roles

------------------------

Mapping of API VERB and API RESOURCES - WE CALL IT

-- clusterroles

      user AND serviceacccount

-- roles

      user AND serviceacccount



BINDING  - types of binding.

=====================

clusterrolebindings

rolebindings







52.5.233.92

52.55.123.243



system:masters





openssl x509 -req -in employee.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /root/rbac/employee.crt -days 500







 837  kubectl create namespace office

  838  clear

  839  ls

  840  openssl genrsa -out employee.key 2048

  841  ls

  842  openssl req -new -key employee.key -out employee.csr -subj "/CN=employee/O=bitnami"

  843  ls

  844  man openssl

  845  man openssl | grep createserial

  846  pwd

  847  openssl x509 -req -in employee.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /root/rbac/employee.crt -days 500

  848  ls

  849  rm -rf employee.csr

  850  clear

  851  ls

  852  clear



kind: Role

apiVersion: rbac.authorization.k8s.io/v1beta1

metadata:

  namespace: office

  name: office-role

rules:

- apiGroups: ["", "extensions", "apps"]

  resources: ["deployments", "replicasets", "pods"]

  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"]





kind: RoleBinding

apiVersion: rbac.authorization.k8s.io/v1beta1

metadata:

  name: office-role-binding

  namespace: office

subjects:

- kind: User

  name: employee

  apiGroup: ""

roleRef:

  kind: Role

  name: office-role

  apiGroup: ""





======USER At LAPTOP==================

kubectl config set-credentials employee --client-certificate=/root/rbac/employee.crt  --client-key=/root/rbac/employee.key



kubectl config set-context employee-context --cluster=kubernetes --namespace=office --user=employee



kubectl config use-context employee-context



kubectl --context=employee-context get pods





$ kubectl --context=employee-context run nginx --image=nginx

$ kubectl --context=employee-context get pods







 857  kubectl

  858  kubectl create

  859  kubectl create role -n=offcie

  860  kubectl create role offile-role -n=office

  861  kubectl create role

  862  kubectl create role -h

  863  clear

  864  ls

  865  vi role.yaml

  866  kubectl create -f role.yaml

  867  kubectl get roles -n=office

  868  kubectl explain RoleBinding.subjects.kind

  869  kubectl get roles -n=office

  870  clear

  871  ls

  872  vi rb.yaml

  873  kubectl create -f rb.yaml

  874  kubectl get RoleBinding -n=office

  875  clear

  876  kubectl config

  877  pwd

  878  ls

  879  cleae

  880  clear

  881  kubectl config set-credentials employee --client-certificate=/root/rbac/employee.crt  --client-key=/root/rbac/employee.key

  882  kubectl config

  883  kubectl config view

  884  kubectl config set-context employee-context --cluster=kubernetes --namespace=office --user=employee

  885  kubectl config view

  886  kubectl config

  887  kubectl config use-context

  888  clear

  889  kubectl --context=employee-context get pods

  890  kubectl config use-context employee-context

  891  kubectl get pods

  892  kubectl get pvc

  893  history



==========================================================



kubectl create sa tecnotree-sa

kubectl get sa -A | grep tec



sa.yaml

---------------

---

apiVersion: v1

kind: ServiceAccount

metadata:

  name: onmob



kubectl create -f sa.yaml

kubectl get sa -A | grep tec

kubectl get secrets











kubectl help create clusterrole

kubectl create clusterrole onmob-clusterroles --verb=get,list,watch --resource=pods

kubectl get clusterrole

kubectl describe clusterrole onmob-clusterroles



kind: ClusterRole

apiVersion: rbac.authorization.k8s.io/v1beta1

metadata:

  namespace: default

  name: tecnotree-clusterroles2

rules:

- apiGroups: ["", "extensions", "apps"]

  resources: ["deployments", "replicasets", "pods"]

  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"]







kubectl create clusterrolebinding onmob-cr-binding --clusterrole=onmob-clusterroles --user=onmob

kubectl get clusterrolebinding

kubectl get clusterrolebinding | grep tec



kind: ClusterRoleBinding

apiVersion: rbac.authorization.k8s.io/v1

metadata:

  name: tecnotree-cr-binding3

subjects:

- kind: ServiceAccount

  name: tecnotree-admin

  apiGroup: rbac.authorization.k8s.io

roleRef:

  kind: ClusterRole

  name: tecnotree-clusterroles2

  apiGroup: rbac.authorization.k8s.io



apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRoleBinding

metadata:

  name: tecnotree-cr-binding

roleRef:

  apiGroup: rbac.authorization.k8s.io

  kind: ClusterRole

  name: tecnotree-clusterroles2

subjects:

- apiGroup: rbac.authorization.k8s.io

  kind: User

  name: tecnotree-admin





=========================



 





kubectl convert -f pod.yaml

kubectl convert -f pod.yaml --local -o json

kubectl convert -f . | kubectl create -f -





==========================================



How to install HELM

====================================



CICD

SECURITY

        RBAC

HELM

OPERATORS & CRD

==============================================================================

================================================================================

HELM

--------

========================================================================

========================================================================					



Helm Architecture

https://helm.sh/docs/topics/architecture/



	

=========================================

curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh

chmod 700 get_helm.sh

./get_helm.sh

helm version

helm

helm help

------------

Working with Helm3?

==============================

Step 1 - To learn more about the available Helm commands

$ helm help

$ helm get -h



Step 2 - INITIALIZE A HELM CHART REPOSITORY

Once you have Helm ready, you can add a chart repository. One popular starting location is the official Helm 



stable charts:

$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/



helm install stable/tomcat



Step 3 - To list the charts you can install:

# Searches the repositories that you have added to your local helm client (with helm repo add).

$ helm search repo

$ helm search repo stable

# Searches the Helm Hub, which comprises helm charts from dozens of different repositories.

$ helm search hub	

$ helm search hub wordpress

$ helm repo add brigade https://brigadecore.github.io/charts

$ helm search repo brigade



Step 4 - Make sure we get the latest list of charts

helm repo update



Step X - Customizing the Chart Before Installing

$ helm show values stable/mariadb

$ echo '{mariadbUser: user0, mariadbDatabase: user0db}' > config.yaml

$ helm install -f config.yaml stable/mariadb



Step 5 - To install a chart, you can run the helm install command

# Whenever you install a chart, a new release is created. So one chart can be installed multiple times into the 



same cluster. And each can be independently managed and upgraded.

$ helm install stable/mysql --generate-name



Step 6 - The features of this MySQL chart

$ helm show chart stable/mysql

# To get all information about the chart.

$ helm show all stable/mysql



Step 7 - To show a list of all deployed releases.

$ helm list

$ helm status <<release-name>>



Step 8 - To uninstall a release, use the helm uninstall command.

# Because Helm tracks your releases even after you’ve uninstalled them, you can audit a cluster’s history, and 



even undelete a release 

$ helm uninstall <<release-name>>



Step 9 - You will be able to request information about that release:

$ helm status smiling-penguin



Helm Installation Methods

=============================================================

A chart repository (as we’ve seen above)

A local chart archive (helm install foo foo-0.1.1.tgz)

An unpacked chart directory (helm install foo path/to/foo)

A full URL (helm install foo https://example.com/charts/foo-1.2.3.tgz)





HELM UPGRADE

=============================================================

When a new version of a chart is released, or when you want to change the configuration of your release, you 



can use the helm upgrade command.



An upgrade takes an existing release and upgrades it according to the information you provide. Because 



Kubernetes charts can be large and complex, Helm tries to perform the least invasive upgrade. It will only 



update things that have changed since the last release.



$ helm upgrade -f panda.yaml happy-panda stable/mariadb



Charts

=====================================================



Chart Hooks

======================================================

https://helm.sh/docs/topics/charts_hooks/







Common actions for Helm:



- helm search:    search for charts

- helm pull:      download a chart to your local directory to view

- helm install:   upload the chart to Kubernetes

- helm list:      list releases of charts

-----------------

helm repo add stable https://kubernetes-charts.storage.googleapis.com/

helm search repo stable

helm repo update

helm install stable/mysql --generate-name

helm show chart stable/mysql

helm show all stable/mysql

helm ls

helm list

helm uninstall smiling-penguin

helm rollback

helm get -h





  completion  Generate autocompletions script for the specified shell (bash or zsh)

  create      create a new chart with the given name

  dependency  manage a chart's dependencies

  env         Helm client environment information

  get         download extended information of a named release

  help        Help about any command

  history     fetch release history

  install     install a chart

  lint        examines a chart for possible issues

  list        list releases

  package     package a chart directory into a chart archive

  plugin      install, list, or uninstall Helm plugins

  pull        download a chart from a repository and (optionally) unpack it in local directory

  repo        add, list, remove, update, and index chart repositories

  rollback    roll back a release to a previous revision

  search      search for a keyword in charts

  show        show information of a chart

  status      displays the status of the named release

  template    locally render templates

  test        run tests for a release

  uninstall   uninstall a release

  upgrade     upgrade a release

  verify      verify that a chart at the given path has been signed and is valid

  version     print the client version informatio	n



Reference

https://helm.sh/docs/intro/using_helm/



Top 20 Helm Charts

https://kubedex.com/top-10/

=================================================================



create

install

lint

package



OPERATORS

================

https://kubernetes.io/docs/reference/using-api/client-libraries/

https://operatorhub.io/

https://operatorhub.io/

https://github.com/kubernetes/sample-controller

https://github.com/operator-framework/operator-sdk

https://github.com/kubernetes-sigs/kubebuilder

https://itnext.io/building-an-operator-for-kubernetes-with-kubebuilder-17cbd3f07761

https://itnext.io/building-an-operator-for-kubernetes-with-kubebuilder-17cbd3f07761







DEBUG

=====================================

Container

    docker logs

    docker ps

    docker events

    docker inspect

    docker info

    docker exec

    docker attach

    dockerfile

    docker impot

    docker export



PODS

    kubectl describe 

    kubectl logs

    kubectl top

    kubectl attach

    kubectl exec





Node

    kubelet  help



storage



Network

================================================================
