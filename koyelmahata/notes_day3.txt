
================================DAY 3====================================================

Master

        API server -> POD -> container - Images -> GR

        ETCD  -> POD -> container - Images -> GR

        Controller Mgr  -> POD -> container - Images -> GR

        Schedular  -> POD -> container - Images -> GR



        Kube proxy -> POD -> container - Images -> GR

        Kubelet - AGENT - TOOL

        Docker - - DEAMON - TOOL

Worker

        Kubelet - AGENT - TOOL

        Kube proxy

        Docker - - DEAMON - TOOL



Workstation

        kubectl -> config



ONE NODE CLUSTOR = minikube

                IS VM

                                API server -> POD ->

                                ETCD  -> POD

                                Controller Mgr  -> POD

                                Schedular  -> POD



                                Kube proxy

                                Kubelet - AGENT - TOOL

                                Docker - - DEAMON - TOOL

https://kubernetes.io/docs/setup/learning-environment/minikube/

minikube

kubectl

                $ minikube start

===================================================================

kubernetes clustor -

                PHYSICAL 



                VIRUAL BOXES

                        PRIVATE CLOUD

                               SELF MANAGED -

                                                OPEN STAKE

                                                VSPHE 

                        PUBLIC

                                HOSTED - MASTER IS PAAS

                                        AWS - EKS

                                        AZURE - AKS

                                        GC - GKE

                                SELF MANAGED - 

                                        MANUAL WAY using

                                        - Kubeadm without cloud Integ

                                        - Kops with cloud integ

https://www.devopsschool.com/tutorial/kubernetes/

============================================================================

hardway

https://github.com/kelseyhightower/kubernetes-the-hard-way                                        



54.152.249.148

Workder - 

34.207.96.204



User –root

Pass – Onm0bile



Docker 

https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html



Kubeadm +++++

https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/



Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.123.1.39:6443 --token i9m9ta.b59wi061fc4u2me3 \
    --discovery-token-ca-cert-hash sha256:2ad06066d7af4edd2783c7edd2c568d391a3d048f6d410832f05eae94958c9a0





   32  kubectl

   33  kubectl cluster-info

   34  kubectlget nodes

   35  kubectl get nodes

   36  kubectl get pods

   37  kubectl get ns

   38  kubectl get pods -n=kube-system

   39  kubectl describe pod coredns-6955765f44-cggpd -n=kube-system

   40  kubectl get nodes

   41  kubectl describe node ip-10-123-1-41.ec2.internal

   42  kubectl get pods -n=kube-system

   43  kubectl describe pod coredns-6955765f44-cggpd -n=kube-system

   44  clear

   45  kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

   46  clear

   47  kubectl get pods -n=kube-system

   48  kubectl get nodes

   49  history

===========================================================================

===================================================================

Working with Nodes?

======================



GET aka list

create

describe

explain

edit

use

delete





Working with Namespaces

===========================================

GET aka list Namespaces

create Namespaces

        CMD

        YAML

describe Namespaces

explain Namespaces

edit Namespaces

use Namespaces

delete Namespaces



   13  kubectl get nodes -o wide

   14  kubectl get pods -o wide

   15  kubectl get pods -o wide -n=kube=system

   16  kubectl get pods -o wide -n=kube-system

   17  clear

   18  kubectl api-resources

   19  c;ear

   20  clear

   21  kubect

   22  kubectl

   23  kubectl api-versions

   24  clear

   25  kubectl get

   26  kubectl get -h

   27  kubectl api-resources

   28  clear

   29  kubectl get ns

   30  clear

   31  kubectl

   32  kubectl create

   33  kubectl create namespace

   34  kubectl create namespace -h

   35  clear

   36  kubectl create namespace -h

   37  kubectl create namespace dev

   38  kubectl get ns

   39  kubectl

   40  kubectl describe ns dev

   41  clear

   42  kubectl describe ns dev

   43  kubeclt

   44  kubectl

   45  clear

   46  kubectl explain ns

   47  kubectl explain ns.spec

   48  kubectl explain ns.spec.finalizers

   49  kubectl explain ns.metadata

   50  kubectl explain ns.metadata.namespace

   51  clear

   52  kubectl

   53  kubectl edit ns dev

   54  clear

   55  kubectl

   56  kubectl delete ns dev

   57  kubectl get ns

   58  history





Working with Pods

===========================================



Working with ReplicationController

===========================================





Working with Deployment

===========================================



Working with Labels

===========================================



Working with Service

===========================================
